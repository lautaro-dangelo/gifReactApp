{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","trim","length","catego","onSubmit","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGrid","Fragment","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMA4CeA,EAtCK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAQnCC,EAAe,SAAEC,GACrBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE7BR,GAAe,SAAAS,GAAM,OAAKP,GAAL,mBAAoBO,OACzCN,EAAc,MAOpB,OAEE,0BAAMO,SAAWN,GACf,2BACAO,KAAK,OACLC,MAASV,EACTW,SAvBwB,SAACR,GACzBF,EAAeE,EAAES,OAAOF,QAuBxBF,SAAYN,MCpBHW,EAZK,SAAC,GAAyB,EAAtBC,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAIjC,OACE,yBAAKC,UAAU,gDACb,yBAAKC,IAAKF,EAAKG,IAAMJ,IACrB,uBAAGE,UAAU,gDAAgDF,K,uBCRtDK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbN,EAFa,iDAEoCO,UAAUF,GAF9C,+DAIAG,MAAOR,GAJP,cAIbS,EAJa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAZvB,kBAeZY,GAfY,4CAAH,sDCuCLK,EApCM,SAAEZ,GAAe,IAAD,EAGVtB,mBAAS,CAEhC4B,KAAM,GACLO,SAAS,IANuB,mBAG7BC,EAH6B,KAGtBC,EAHsB,KAgCpC,OAtBDC,qBAAW,WAEPjB,EAASC,GACRiB,MAAM,SAAAC,GAGPH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAQd,CAAEb,IAMGc,GCGOK,EAjCC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,EAGCY,EAAcZ,GAAnCU,EAHoB,EAG1BJ,KAAeO,EAHW,EAGXA,QAGrB,OAEA,kBAAC,IAAMO,SAAP,KAEE,wBAAIxB,UAAU,gDAAd,IAAgEI,EAAhE,KAEGa,GAAW,uBAAGjB,UAAU,oCAAb,eAEV,yBAAKA,UAAU,aAETc,EAAOF,KAAK,SAAAC,GAAG,OAEb,kBAAC,EAAD,eACAY,IAAOZ,EAAIhB,IACNgB,UCKNa,MAzBf,WAAwB,IAAD,EAGa5C,mBAAU,CAAC,WAHxB,mBAGhB6C,EAHgB,KAGJ9C,EAHI,KAKnB,OAEJ,kBAAC,IAAM2C,SAAP,KACI,wBAAIxB,UAAU,mCAAd,WACG,kBAAC,EAAD,CAAanB,cAAiBA,IACjC,6BAEI8C,EAAWf,KAAK,SAAAR,GAAQ,OAEhB,kBAAC,EAAD,CACAA,SAAWA,EACXqB,IAAOrB,S,MCbvBwB,IAASC,OAAQ,kBAAC,EAAD,MAAiBC,SAASC,eAAe,U","file":"static/js/main.4481fe59.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\n\n\nconst AddCategory = ( { setCategories } ) => {\n    \n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n      setInputValue( e.target.value );\n    };\n\n    const handleSubmit = ( e ) => {\n      e.preventDefault();\n\n      if( inputValue.trim().length > 2){\n        \n        setCategories( catego => [inputValue, ...catego] );\n        setInputValue('');\n        \n      };\n\n    };\n\n    \n  return (\n\n    <form onSubmit={ handleSubmit } >\n      <input \n      type='text'\n      value= { inputValue }\n      onChange= { handleInputChange }\n      onSubmit= { handleSubmit }\n      />\n    </form>\n  )\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","import React from 'react'\n\nconst GifGridItem = ( { id, title, url } ) => {\n\n\n\n  return (\n    <div className='card animate__animated animate__bounceInDown' >\n      <img src={url} alt={ title }/>\n      <p className='animate__animated animate__rotateInDownRight'>{title}</p>\n    </div>\n  )\n}\n\nexport default GifGridItem\n\n","\nexport const getGifs = async ( category ) => {\n    \n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=0wfFkXx3hC5g4b1w1uEU2jfB8BDBhd9S`;\n\n    const resp = await fetch( url );\n\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n};","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\n\nconst useFetchGifs = ( category ) => {\n\n\n const [state, setState] = useState({\n    \n    data: [ ],\n     loading: true\n\n });\n\nuseEffect( () => {\n\n    getGifs( category )\n    .then( imgs => {\n\n\n    setState({\n        data: imgs,\n        loading: false\n    });\n\n\n\n\n    })\n\n}, [ category ])\n\n\n\n\n\n return state; // { data: [], loading: true };\n\n}\n\nexport default useFetchGifs\n\n\n\n\n","import React from 'react';\n\nimport GifGridItem from './GifGridItem';\n\nimport useFetchGifs from '../hooks/useFetchGifs';\n\nconst GifGrid = ( {category} ) => {\n\n\nconst { data: images , loading } = useFetchGifs( category );\n\n\n  return (\n   \n  <React.Fragment>\n\n    <h3 className='animate__animated animate__rotateInDownRight'> { category } </h3>\n\n      {loading && <p className='animate__animated animate__flash'>Cargando...</p>}\n\n        <div className='card-grid'>\n            {\n              images.map( img => (\n              \n                <GifGridItem \n                key= { img.id }\n                { ...img}\n                />\n\n              ))\n          }\n      </div>\n\n  </React.Fragment>\n\n  );\n  \n};\n\nexport default GifGrid\n","import React, { useState } from 'react';\n\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\n\nfunction GifExpertApp(){\n\n\nconst [categories, setCategories] = useState( ['Stitch']);\n\n    return(\n\n<React.Fragment>\n    <h2 className='animate__animated animate__flip'>GIF APP</h2>\n       <AddCategory setCategories= { setCategories } />\n    <hr />\n    {\n        categories.map( category =>(\n            \n                <GifGrid \n                category={ category } \n                key= { category }\n                />\n            \n        ))\n    }\n</React.Fragment>\n    )\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render( <GifExpertApp />,document.getElementById('root'));\n\n"],"sourceRoot":""}